---
# tasks file for kibana_role


  - name: Check if su exist
    stat:
      path: /usr/bin/su
    register: file_su
    tags: kibana_install
  - name: Check if sudo exist
    stat:
      path: /usr/bin/sudo
    register: file_sudo
    tags: kibana_install

  # - name: Update intermediate certificates to certificate bundle
  #   become: yes
  #   become_method: su
  #   command: /usr/sbin/update-ca-certificates
  #   when: f.stat.exists

  # - name: Upload tar.gz Kibana from remote URL
  #   get_url:
  #     url: "https://artifacts.elastic.co/downloads/kibana/kibana-{{ kibana_version }}-linux-{{ host_platform }}.tar.gz"
  #     dest: "/tmp/kibana-{{ kibana_version }}-linux-{{ host_platform }}.tar.gz"
  #     mode: 0755
  #     timeout: 60
  #     force: true
  #     validate_certs: no
  #   register: get_kibana
  #   until: get_kibana is succeeded
  #   tags: kibana_install

  - name: Add the group kibana_group with sudo
    become: yes
    become_method: sudo
    ansible.builtin.group:
      name: "{{ kibana_group }}"
      state: present
    tags:
      - kibana_install
    when: file_sudo.stat.exists

  - name: Add the group kibana_group with su
    become: yes
    become_method: su
    ansible.builtin.group:
      name: "{{ kibana_group }}"
      state: present
    tags:
      - kibana_install
    when: file_su.stat.exists and not file_sudo.stat.exists

  - name: Add the user kibana_user with sudo
    become: yes
    become_method: sudo
    ansible.builtin.user:
      name: "{{ kibana_user }}"
    tags:
      - kibana_install
    when: file_sudo.stat.exists

  - name: Add the user kibana_user with su
    become: yes
    become_method: su
    ansible.builtin.user:
      name: "{{ kibana_user }}"
    tags:
      - kibana_install
    when: file_su.stat.exists and not file_su.stat.exists

  - name: copy tar.gz Kibana with sudo
    become: yes
    become_method: sudo
    ansible.builtin.copy:
      src: "files/kibana-{{ kibana_version }}-linux-{{ host_platform }}.tar.gz"
      dest: "/tmp/kibana-{{ kibana_version }}-linux-{{ host_platform }}.tar.gz"
      mode: 0755
      owner: "{{ kibana_user }}"
      group: "{{ kibana_group }}"
      force: true
    register: get_kibana
    until: get_kibana is succeeded
    tags:
      - kibana_install
    when: file_sudo.stat.exists

  - name: copy tar.gz Kibana with su
    become: yes
    become_method: su
    ansible.builtin.copy:
      src: "files/kibana-{{ kibana_version }}-linux-{{ host_platform }}.tar.gz"
      dest: "/tmp/kibana-{{ kibana_version }}-linux-{{ host_platform }}.tar.gz"
      mode: 0755
      owner: "{{ kibana_user }}"
      group: "{{ kibana_group }}"
      force: true
    register: get_kibana
    until: get_kibana is succeeded
    tags:
      - kibana_install
    when: file_su.stat.exists and not file_su.stat.exists

  - name: Create directrory for Kibana with sudo
    become: yes
    become_method: sudo
    file:
      state: directory
      path: "{{ kibana_home }}"
      mode: 0755
    tags:
      - kibana_install
    when: file_sudo.stat.exists

  - name: Create directrory for Kibana with su
    become: yes
    become_method: su
    file:
      state: directory
      path: "{{ kibana_home }}"
      mode: 0755
    tags:
      - kibana_install
    when: file_su.stat.exists and not file_su.stat.exists

  - name: Extract Kibana in the installation directory with sudo
    become: yes
    become_method: sudo
    ansible.builtin.unarchive:
      copy: false
      src: "/tmp/kibana-{{ kibana_version }}-linux-{{ host_platform }}.tar.gz"
      owner: "{{ kibana_user }}"
      group: "{{ kibana_group }}"
      dest: "{{ kibana_home }}"
      extra_opts: [--strip-components=1]
      creates: "{{ kibana_home }}/bin/kibana"
    tags:
      - kibana_install
    when: file_sudo.stat.exists

  - name: Extract Kibana in the installation directory with su
    become: yes
    become_method: su
    ansible.builtin.unarchive:
      copy: false
      src: "/tmp/kibana-{{ kibana_version }}-linux-{{ host_platform }}.tar.gz"
      owner: "{{ kibana_user }}"
      group: "{{ kibana_group }}"
      dest: "{{ kibana_home }}"
      extra_opts: [--strip-components=1]
      creates: "{{ kibana_home }}/bin/kibana"
    tags:
      - kibana_install
    when: file_su.stat.exists and not file_su.stat.exists

  - name: Set environment Kibana with sudo
    become: yes
    become_method: sudo
    template:
      src: templates/kbn.sh.j2
      dest: /etc/profile.d/kbn.sh
    tags: kibana_install
    when: file_sudo.stat.exists

  - name: Set environment Kibana with su
    become: yes
    become_method: su
    template:
      src: templates/kbn.sh.j2
      dest: /etc/profile.d/kbn.sh
    when: file_su.stat.exists and not file_su.stat.exists
    tags: kibana_install




